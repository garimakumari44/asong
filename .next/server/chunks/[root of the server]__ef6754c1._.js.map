{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file://C%3A/asong/asong/lib/db.ts"],"sourcesContent":["import {PrismaClient} from '@prisma/client'\r\n\r\n\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n    prisma : PrismaClient| undefined\r\n}\r\n\r\n\r\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\r\n\r\nif(process.env.NODE_ENV != 'production') globalForPrisma.prisma = prisma;\r\n\r\nexport const db = prisma;"],"names":[],"mappings":";;;;AAAA;;AAIA,MAAM,kBAAkB;AAKjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAAyC,gBAAgB,MAAM,GAAG;AAE3D,MAAM,KAAK","debugId":null}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":["file://C%3A/asong/asong/src/app/api/user/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { db } from \"../../../../lib/db\";\r\nimport { hash } from 'bcrypt';\r\nimport {z} from 'zod'\r\nimport {signIn} from 'next-auth/react'\r\n\r\n\r\n\r\n\r\nconst userSchema = z.object({\r\n    name: z.string()\r\n    .min(3, \"Username must be at least 3 characters\")\r\n    .max(20, \"Username must be less than 20 characters\"),\r\n    email: z.string()\r\n    .email(\"Invalid email address\")\r\n    .transform(val => val.toLowerCase().trim()),\r\n    password: z.string()\r\n    .min(8, \"Password must be at least 8 characters\")\r\n    .max(100, \"Password must be less than 100 characters\"),\r\n   \r\n})\r\n\r\nexport async function POST(req: NextRequest) {\r\n    try {\r\n        const body = await req.json();\r\n        const { email, name, password } = userSchema.parse(body);\r\n\r\n        // Validate required fields\r\n        if (!email || !name || !password) {\r\n            return NextResponse.json(\r\n                { user: null, message: \"All fields are required\" },\r\n                { status: 400 }\r\n            );\r\n        }\r\n\r\n        // Check for existing user by email\r\n        const existingUserByEmail = await db.user.findUnique({\r\n            where: { email: email }\r\n        });\r\n\r\n        if (existingUserByEmail) {\r\n            return NextResponse.json(\r\n                { user: null, message: \"User with this email already exists\" },\r\n                { status: 409 }\r\n            );\r\n        }\r\n\r\n        const existingUserByUsername = await db.user.findFirst({\r\n            where: { name: name }\r\n        });\r\n        if (existingUserByUsername) {\r\n            return NextResponse.json(\r\n                { user: null, message: \"User with this username already exists\" },\r\n                { status: 409 }\r\n            );\r\n        }\r\n\r\n        // Hash password\r\n         const hashedPassword = await hash(password, 10);\r\n\r\n        // Create new user\r\n        const newUser = await db.user.create({\r\n            data: {\r\n                name,\r\n                email,\r\n                password: hashedPassword\r\n            }\r\n        });\r\n\r\n        // Remove password from response for security\r\n        const { password: _, ...userWithoutPassword } = newUser;\r\n\r\n        return NextResponse.json(\r\n            { user: userWithoutPassword, message: \"User created successfully\" },\r\n            { status: 201 }\r\n        );\r\n\r\n    } catch (error) {\r\n        console.error(\"Registration error:\", error);\r\n        return NextResponse.json(\r\n            { user: null, message: \"Internal server error\" },\r\n            { status: 500 }\r\n        );\r\n    }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAMA,MAAM,aAAa,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxB,MAAM,sIAAA,CAAA,IAAC,CAAC,MAAM,GACb,GAAG,CAAC,GAAG,0CACP,GAAG,CAAC,IAAI;IACT,OAAO,sIAAA,CAAA,IAAC,CAAC,MAAM,GACd,KAAK,CAAC,yBACN,SAAS,CAAC,CAAA,MAAO,IAAI,WAAW,GAAG,IAAI;IACxC,UAAU,sIAAA,CAAA,IAAC,CAAC,MAAM,GACjB,GAAG,CAAC,GAAG,0CACP,GAAG,CAAC,KAAK;AAEd;AAEO,eAAe,KAAK,GAAgB;IACvC,IAAI;QACA,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,WAAW,KAAK,CAAC;QAEnD,2BAA2B;QAC3B,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,UAAU;YAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,MAAM;gBAAM,SAAS;YAA0B,GACjD;gBAAE,QAAQ;YAAI;QAEtB;QAEA,mCAAmC;QACnC,MAAM,sBAAsB,MAAM,2GAAA,CAAA,KAAE,CAAC,IAAI,CAAC,UAAU,CAAC;YACjD,OAAO;gBAAE,OAAO;YAAM;QAC1B;QAEA,IAAI,qBAAqB;YACrB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,MAAM;gBAAM,SAAS;YAAsC,GAC7D;gBAAE,QAAQ;YAAI;QAEtB;QAEA,MAAM,yBAAyB,MAAM,2GAAA,CAAA,KAAE,CAAC,IAAI,CAAC,SAAS,CAAC;YACnD,OAAO;gBAAE,MAAM;YAAK;QACxB;QACA,IAAI,wBAAwB;YACxB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,MAAM;gBAAM,SAAS;YAAyC,GAChE;gBAAE,QAAQ;YAAI;QAEtB;QAEA,gBAAgB;QACf,MAAM,iBAAiB,MAAM,CAAA,GAAA,qGAAA,CAAA,OAAI,AAAD,EAAE,UAAU;QAE7C,kBAAkB;QAClB,MAAM,UAAU,MAAM,2GAAA,CAAA,KAAE,CAAC,IAAI,CAAC,MAAM,CAAC;YACjC,MAAM;gBACF;gBACA;gBACA,UAAU;YACd;QACJ;QAEA,6CAA6C;QAC7C,MAAM,EAAE,UAAU,CAAC,EAAE,GAAG,qBAAqB,GAAG;QAEhD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,MAAM;YAAqB,SAAS;QAA4B,GAClE;YAAE,QAAQ;QAAI;IAGtB,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,MAAM;YAAM,SAAS;QAAwB,GAC/C;YAAE,QAAQ;QAAI;IAEtB;AACJ","debugId":null}}]
}