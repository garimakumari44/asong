{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/montserrat_13de42cc.module.css [app-rsc] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"className\": \"montserrat_13de42cc-module__XwCvEq__className\",\n  \"variable\": \"montserrat_13de42cc-module__XwCvEq__variable\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/montserrat_13de42cc.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22layout.tsx%22,%22import%22:%22Montserrat%22,%22arguments%22:[{%22variable%22:%22--font-mono-sans%22,%22subsets%22:[%22latin%22],%22weight%22:[%22100%22,%22200%22,%22300%22,%22400%22,%22500%22,%22600%22,%22700%22,%22800%22,%22900%22]}],%22variableName%22:%22Mono%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Montserrat', 'Montserrat Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,0JAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,0JAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,0JAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":["file://G%3A/Asong/asong/src/app/context/AppContext.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const AppContext = registerClientReference(\n    function() { throw new Error(\"Attempted to call AppContext() from the server but AppContext is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/context/AppContext.tsx <module evaluation>\",\n    \"AppContext\",\n);\nexport const AppContextProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call AppContextProvider() from the server but AppContextProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/context/AppContext.tsx <module evaluation>\",\n    \"AppContextProvider\",\n);\nexport const useAppContext = registerClientReference(\n    function() { throw new Error(\"Attempted to call useAppContext() from the server but useAppContext is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/context/AppContext.tsx <module evaluation>\",\n    \"useAppContext\",\n);\n"],"names":[],"mappings":";;;;;AAAA;;AACO,MAAM,aAAa,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,gEACA;AAEG,MAAM,qBAAqB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACpD;IAAa,MAAM,IAAI,MAAM;AAAoP,GACjR,gEACA;AAEG,MAAM,gBAAgB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,gEACA","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file://G%3A/Asong/asong/src/app/context/AppContext.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const AppContext = registerClientReference(\n    function() { throw new Error(\"Attempted to call AppContext() from the server but AppContext is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/context/AppContext.tsx\",\n    \"AppContext\",\n);\nexport const AppContextProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call AppContextProvider() from the server but AppContextProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/context/AppContext.tsx\",\n    \"AppContextProvider\",\n);\nexport const useAppContext = registerClientReference(\n    function() { throw new Error(\"Attempted to call useAppContext() from the server but useAppContext is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/context/AppContext.tsx\",\n    \"useAppContext\",\n);\n"],"names":[],"mappings":";;;;;AAAA;;AACO,MAAM,aAAa,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,4CACA;AAEG,MAAM,qBAAqB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACpD;IAAa,MAAM,IAAI,MAAM;AAAoP,GACjR,4CACA;AAEG,MAAM,gBAAgB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,4CACA","debugId":null}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file://G%3A/Asong/asong/src/app/layout.tsx"],"sourcesContent":["import type { Metadata } from \"next\";\nimport { Montserrat } from \"next/font/google\";\nimport {ClerkProvider , SignInButton,\n  SignUpButton,\n  SignedIn,\n  SignedOut,\n  UserButton,} from '@clerk/nextjs'\nimport \"./globals.css\";\nimport { AppContextProvider } from \"./context/AppContext\";\nimport {Toaster} from 'react-hot-toast'\nimport Link from \"next/link\";\n\nconst Mono = Montserrat({\n  variable: \"--font-mono-sans\",\n  subsets: [\"latin\"],\n  weight: ['100', '200', '300', '400', '500', '600', '700', '800', '900']\n});\n\n\n\nexport const metadata: Metadata = {\n  title: \"Asong\",\n  description: \"AI lyrics\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <ClerkProvider>\n      <AppContextProvider>\n    <html lang=\"en\">\n      \n      <body\n        className={`${Mono.variable} ${Mono.variable} antialiased`}\n      >\n\n        <header> \n          <div>\n            <Link href={'/dashboard'}> </Link>\n            \n          </div>\n        </header>\n        <Toaster toastOptions={{success: {style:{background: \"black\", color: \"white\"}},\n         error:{style: {background: \"black\", color: \"white\"}}\n\n      }}/> \n\n\n             \n        {children}\n      </body>\n     \n    </html>\n    </AppContextProvider>\n    </ClerkProvider>\n  );\n}\n"],"names":[],"mappings":";;;;;;AAEA;AAMA;AACA;AACA;;;;;;;;AAUO,MAAM,WAAqB;IAChC,OAAO;IACP,aAAa;AACf;AAEe,SAAS,WAAW,EACjC,QAAQ,EAGR;IACA,qBACE,8OAAC,yKAAA,CAAA,gBAAa;kBACZ,cAAA,8OAAC,oIAAA,CAAA,qBAAkB;sBACrB,cAAA,8OAAC;gBAAK,MAAK;0BAET,cAAA,8OAAC;oBACC,WAAW,GAAG,8IAAA,CAAA,UAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,8IAAA,CAAA,UAAI,CAAC,QAAQ,CAAC,YAAY,CAAC;;sCAG1D,8OAAC;sCACC,cAAA,8OAAC;0CACC,cAAA,8OAAC,4JAAA,CAAA,UAAI;oCAAC,MAAM;8CAAc;;;;;;;;;;;;;;;;sCAI9B,8OAAC,uJAAA,CAAA,UAAO;4BAAC,cAAc;gCAAC,SAAS;oCAAC,OAAM;wCAAC,YAAY;wCAAS,OAAO;oCAAO;gCAAC;gCAC5E,OAAM;oCAAC,OAAO;wCAAC,YAAY;wCAAS,OAAO;oCAAO;gCAAC;4BAEtD;;;;;;wBAIG;;;;;;;;;;;;;;;;;;;;;;AAOT","debugId":null}}]
}