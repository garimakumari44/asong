{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://C%3A/asong/asong/src/app/api/ai/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const requestBody = await req.json();\r\n    \r\n    if (!requestBody.prompts || !Array.isArray(requestBody.prompts)) {\r\n      return NextResponse.json(\r\n        { error: \"Prompts must be an array\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    const validatedMessages = [];\r\n    for (const msg of requestBody.prompts) {\r\n      if (typeof msg !== 'object' || !msg.role || !msg.content) {\r\n        return NextResponse.json(\r\n          { error: \"Each message must have {role, content}\" },\r\n          { status: 400 }\r\n        );\r\n      }\r\n\r\n      if (!['user', 'assistant', 'system'].includes(msg.role)) {\r\n        return NextResponse.json(\r\n          { error: \"Role must be user, assistant, or system\" },\r\n          { status: 400 }\r\n        );\r\n      }\r\n\r\n      validatedMessages.push({\r\n        role: msg.role,\r\n        content: String(msg.content) // Ensure content is string\r\n      });\r\n    }\r\n\r\n\r\n    // // Prepare messages for OpenRouter\r\n    // const openRouterMessages = prompts.map(msg => ({\r\n    //   role: msg.role,\r\n    //   content: msg.content\r\n    // }));\r\n\r\n    const response = await fetch(\"https://openrouter.ai/api/v1/chat/completions\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Authorization\": `Bearer ${process.env.OPENROUTER_API_KEY}`, // Use environment variable\r\n        \"Content-Type\": \"application/json\",\r\n        \"HTTP-Referer\": process.env.SITE_URL || \"\", // From environment variables\r\n        \"X-Title\": process.env.SITE_NAME || \"\" // From environment variables\r\n      },\r\n      body: JSON.stringify({\r\n        \"model\": \"deepseek/deepseek-r1:free\",\r\n        \"messages\": validatedMessages // Use the properly formatted messages\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      console.error(\"OpenRouter Error:\", errorData);\r\n      return NextResponse.json(\r\n        { \r\n          success: false, \r\n          message: errorData.error?.message || \"OpenRouter API error\" \r\n        },\r\n        { status: response.status }\r\n      );\r\n    }\r\n\r\n    const data = await response.json();\r\n    const aiMessage = {\r\n      role: \"assistant\",\r\n      content: data.choices?.[0]?.message?.content || \"No response from AI\",\r\n    };\r\n\r\n    return NextResponse.json({ \r\n      success: true, \r\n      data: aiMessage \r\n    });\r\n\r\n  } catch (error) {\r\n    console.error(\"Server Error:\", error);\r\n    return NextResponse.json(\r\n      { \r\n        success: false, \r\n        message: error instanceof Error ? error.message : \"Internal server error\" \r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,cAAc,MAAM,IAAI,IAAI;QAElC,IAAI,CAAC,YAAY,OAAO,IAAI,CAAC,MAAM,OAAO,CAAC,YAAY,OAAO,GAAG;YAC/D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA2B,GACpC;gBAAE,QAAQ;YAAI;QAElB;QACA,MAAM,oBAAoB,EAAE;QAC5B,KAAK,MAAM,OAAO,YAAY,OAAO,CAAE;YACrC,IAAI,OAAO,QAAQ,YAAY,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,OAAO,EAAE;gBACxD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;oBAAE,OAAO;gBAAyC,GAClD;oBAAE,QAAQ;gBAAI;YAElB;YAEA,IAAI,CAAC;gBAAC;gBAAQ;gBAAa;aAAS,CAAC,QAAQ,CAAC,IAAI,IAAI,GAAG;gBACvD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;oBAAE,OAAO;gBAA0C,GACnD;oBAAE,QAAQ;gBAAI;YAElB;YAEA,kBAAkB,IAAI,CAAC;gBACrB,MAAM,IAAI,IAAI;gBACd,SAAS,OAAO,IAAI,OAAO,EAAE,2BAA2B;YAC1D;QACF;QAGA,qCAAqC;QACrC,mDAAmD;QACnD,oBAAoB;QACpB,yBAAyB;QACzB,OAAO;QAEP,MAAM,WAAW,MAAM,MAAM,iDAAiD;YAC5E,QAAQ;YACR,SAAS;gBACP,iBAAiB,CAAC,OAAO,EAAE,QAAQ,GAAG,CAAC,kBAAkB,EAAE;gBAC3D,gBAAgB;gBAChB,gBAAgB,QAAQ,GAAG,CAAC,QAAQ,IAAI;gBACxC,WAAW,QAAQ,GAAG,CAAC,SAAS,IAAI,GAAG,6BAA6B;YACtE;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB,SAAS;gBACT,YAAY,kBAAkB,sCAAsC;YACtE;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,QAAQ,KAAK,CAAC,qBAAqB;YACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBACE,SAAS;gBACT,SAAS,UAAU,KAAK,EAAE,WAAW;YACvC,GACA;gBAAE,QAAQ,SAAS,MAAM;YAAC;QAE9B;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,MAAM,YAAY;YAChB,MAAM;YACN,SAAS,KAAK,OAAO,EAAE,CAAC,EAAE,EAAE,SAAS,WAAW;QAClD;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;QACR;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iBAAiB;QAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACpD,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}