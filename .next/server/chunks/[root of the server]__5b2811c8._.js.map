{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file://C%3A/asong/asong/lib/db.ts"],"sourcesContent":["import {PrismaClient} from '@prisma/client'\r\n\r\n\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n    prisma : PrismaClient| undefined\r\n}\r\n\r\n\r\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\r\n\r\nif(process.env.NODE_ENV != 'production') globalForPrisma.prisma = prisma;\r\n\r\nexport const db = prisma;"],"names":[],"mappings":";;;;AAAA;;AAIA,MAAM,kBAAkB;AAKjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAAyC,gBAAgB,MAAM,GAAG;AAE3D,MAAM,KAAK","debugId":null}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file://C%3A/asong/asong/lib/auth.ts"],"sourcesContent":["import { NextAuthOptions, User } from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport { PrismaAdapter } from \"@next-auth/prisma-adapter\";\r\nimport { db } from \"./db\";\r\nimport bcrypt from 'bcrypt';\r\n\r\nconst adapter = PrismaAdapter(db);\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  adapter,\r\n  pages: {\r\n    signIn: '/sign-in',\r\n    error: '/auth/error',\r\n  },\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: \"Credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"email\", placeholder: \"email@example.com\" },\r\n        password: { label: \"Password\", type: \"password\" }\r\n      },\r\n      async authorize(credentials): Promise<User | null> {\r\n        if (!credentials?.email || !credentials?.password) {\r\n          throw new Error(\"Email and password are required\");\r\n        }\r\n\r\n        try {\r\n          const user = await db.user.findUnique({\r\n            where: { email: credentials.email },\r\n          });\r\n\r\n          if (!user) {\r\n            throw new Error(\"No user found with this email\");\r\n          }\r\n\r\n          if (!user.password) {\r\n            throw new Error(\"Password not set for this account\");\r\n          }\r\n\r\n          const isValid = await bcrypt.compare(\r\n            credentials.password,\r\n            user.password\r\n          );\r\n\r\n          if (!isValid) {\r\n            throw new Error(\"Invalid password\");\r\n          }\r\n\r\n          return {\r\n            id: user.id.toString(), // Convert Int ID to string\r\n            email: user.email,\r\n            name: user.name || null,\r\n            // Add other necessary fields\r\n          };\r\n        } catch (error) {\r\n          console.error(\"Authorization error:\", error);\r\n          return null;\r\n        }\r\n      }\r\n    })\r\n  ],\r\n  session: {\r\n    strategy: \"jwt\",\r\n  },\r\n  secret: process.env.NEXTAUTH_SECRET!,\r\n  debug: process.env.NODE_ENV === 'development',\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        token.id = user.id;\r\n        token.email = user.email;\r\n        token.name = user.name;\r\n      }\r\n      return token;\r\n    },\r\n    async session({ session, token }) {\r\n      if (session.user) {\r\n        session.user.id = token.id as string;\r\n        session.user.email = token.email as string;\r\n        session.user.name = token.name as string | null;\r\n      }\r\n      return session;\r\n    }\r\n  }\r\n};"],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;;;;;AAEA,MAAM,UAAU,CAAA,GAAA,sKAAA,CAAA,gBAAa,AAAD,EAAE,2GAAA,CAAA,KAAE;AAEzB,MAAM,cAA+B;IAC1C;IACA,OAAO;QACL,QAAQ;QACR,OAAO;IACT;IACA,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;oBAAS,aAAa;gBAAoB;gBACzE,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,MAAM,IAAI,MAAM;gBAClB;gBAEA,IAAI;oBACF,MAAM,OAAO,MAAM,2GAAA,CAAA,KAAE,CAAC,IAAI,CAAC,UAAU,CAAC;wBACpC,OAAO;4BAAE,OAAO,YAAY,KAAK;wBAAC;oBACpC;oBAEA,IAAI,CAAC,MAAM;wBACT,MAAM,IAAI,MAAM;oBAClB;oBAEA,IAAI,CAAC,KAAK,QAAQ,EAAE;wBAClB,MAAM,IAAI,MAAM;oBAClB;oBAEA,MAAM,UAAU,MAAM,qGAAA,CAAA,UAAM,CAAC,OAAO,CAClC,YAAY,QAAQ,EACpB,KAAK,QAAQ;oBAGf,IAAI,CAAC,SAAS;wBACZ,MAAM,IAAI,MAAM;oBAClB;oBAEA,OAAO;wBACL,IAAI,KAAK,EAAE,CAAC,QAAQ;wBACpB,OAAO,KAAK,KAAK;wBACjB,MAAM,KAAK,IAAI,IAAI;oBAErB;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,wBAAwB;oBACtC,OAAO;gBACT;YACF;QACF;KACD;IACD,SAAS;QACP,UAAU;IACZ;IACA,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,OAAO,oDAAyB;IAChC,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,KAAK,GAAG,KAAK,KAAK;gBACxB,MAAM,IAAI,GAAG,KAAK,IAAI;YACxB;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,QAAQ,IAAI,EAAE;gBAChB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,KAAK,GAAG,MAAM,KAAK;gBAChC,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;YAChC;YACA,OAAO;QACT;IACF;AACF","debugId":null}},
    {"offset": {"line": 266, "column": 0}, "map": {"version":3,"sources":["file://C%3A/asong/asong/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\"\r\nimport { authOptions } from \"../../../../../lib/auth\";\r\n\r\nconst handler = NextAuth(authOptions);\r\n\r\n\r\nexport {handler as GET , handler as POST}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE,6GAAA,CAAA,cAAW","debugId":null}}]
}