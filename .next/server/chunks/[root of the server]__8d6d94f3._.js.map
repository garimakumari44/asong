{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":["file://C%3A/asong/asong/src/app/api/ai/route.ts"],"sourcesContent":["import { Chat } from \"@/models/chat\";\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport axios from 'axios';\r\nimport OpenAI from 'openai'\r\n\r\n\r\nif(!process.env.DEEPSEEK_API_KEY) {\r\n  throw new Error(\"Deepseek api is not working\")\r\n}\r\n\r\nconst openai = new OpenAI({\r\n  baseURL: 'https://api.deepseek.com',\r\n  apiKey: '<DeepSeek API Key>'\r\n});\r\n\r\nexport async function POST(req: NextRequest) {\r\n \r\n       \r\n\r\n        try {\r\n\r\n       \r\n          const { prompts } = await req.json();\r\n          \r\n        \r\n          if (!prompts || !Array.isArray(prompts)) {\r\n            return NextResponse.json({\r\n              error: \"Invalid message format\"\r\n\r\n            }, \r\n          {\r\n            status: 400\r\n          })\r\n          }\r\n        \r\n          \r\n          const completion = await openai.chat.completions.create({\r\n            messages: [{ role: \"system\", content: \"You are a helpful assistant.\" }, ...prompts],\r\n            model: \"deepseek-chat\",\r\n          });\r\n        \r\n          console.log(completion.choices[0].message.content);\r\n          // Save AI response\r\n          const aiMessage = {\r\n            role: \"assistant\",\r\n            content: completion.choices[0].message.content || \"No Response\",\r\n            timestamp: Date.now(),\r\n          };\r\n          \r\n          return NextResponse.json({ success: true, data: aiMessage });\r\n        } catch (error) {\r\n          console.error(\"Error:\", error);\r\n          return NextResponse.json(\r\n            { success: false, message: \"Internal server error\" },\r\n            { status: 500 }\r\n          );\r\n        }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":[],"mappings":";;;AACA;AAEA;;;AAGA,IAAG,CAAC,QAAQ,GAAG,CAAC,gBAAgB,EAAE;IAChC,MAAM,IAAI,MAAM;AAClB;AAEA,MAAM,SAAS,IAAI,kJAAA,CAAA,UAAM,CAAC;IACxB,SAAS;IACT,QAAQ;AACV;AAEO,eAAe,KAAK,GAAgB;IAInC,IAAI;QAGF,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,IAAI;QAGlC,IAAI,CAAC,WAAW,CAAC,MAAM,OAAO,CAAC,UAAU;YACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;YAET,GACF;gBACE,QAAQ;YACV;QACA;QAGA,MAAM,aAAa,MAAM,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YACtD,UAAU;gBAAC;oBAAE,MAAM;oBAAU,SAAS;gBAA+B;mBAAM;aAAQ;YACnF,OAAO;QACT;QAEA,QAAQ,GAAG,CAAC,WAAW,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO;QACjD,mBAAmB;QACnB,MAAM,YAAY;YAChB,MAAM;YACN,SAAS,WAAW,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO,IAAI;YAClD,WAAW,KAAK,GAAG;QACrB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM,MAAM;QAAU;IAC5D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,UAAU;QACxB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,SAAS;QAAwB,GACnD;YAAE,QAAQ;QAAI;IAElB;AACR","debugId":null}}]
}